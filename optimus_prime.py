import pandas as pd
#import numpy as np
import gurobipy as gp

distance = pd.read_csv('D:/python/d32f0742246d11ee/dataset/Distance_Matrix.csv')
forecast_2018 = pd.read_csv('D:/python/d32f0742246d11ee/dataset/pred_2018.csv')
forecast_2019 = pd.read_csv('D:/python/d32f0742246d11ee/dataset/pred_2019.csv')

## reorganizing
distance = distance.drop(columns='Unnamed: 0')
forecast_2018 = forecast_2018.drop(columns='Unnamed: 0')
forecast_2019 = forecast_2019.drop(columns='Unnamed: 0')
forecast_2018.set_index('Index',drop=True,inplace=True)
forecast_2019.set_index('Index',drop=True,inplace=True)

'''Cluster_0 =   [1061, 1062, 1063, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1477, 1478, 1479, 1538]
Cluster_1 = [992, 993, 1044, 1045, 1046, 1047, 1048, 1049, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1268, 1269, 1270, 1271, 1272, 1273, 1334, 1335, 1336, 1337, 1338, 1339, 1401, 1402, 1403]
Cluster_2 =  [98, 99, 123, 124, 125, 126, 127, 128, 147, 148, 149, 150, 151, 152, 153, 154, 173, 174, 175, 176, 177, 178, 179, 180, 213, 214, 215, 216, 217, 218, 219, 255, 256, 257, 258, 259, 260, 295, 296, 297, 298, 338]
Cluster_3=  [1680, 1681, 1682, 1683, 1684, 1685, 1686, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1955, 1956, 1957, 1958, 1959, 1960, 2012, 2013, 2014, 2062, 2063]
Cluster_4 =  [1775, 1776, 1777, 1778, 1779, 1780, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2050, 2051, 2052, 2053, 2054, 2055, 2099, 2100, 2101, 2102, 2103, 2147, 2148]
Cluster_5 = [2073, 2074, 2075, 2119, 2120, 2121, 2122, 2123, 2124, 2164, 2165, 2166, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2241, 2242, 2243, 2244, 2245, 2246, 2247, 2276, 2277, 2278, 2279, 2280, 2281, 2282, 2283, 2304, 2305, 2306, 2307, 2308, 2309, 2310, 2311, 2312, 2330, 2331, 2332, 2333, 2334, 2335, 2336, 2337]
Cluster_6 =  [509, 510, 511, 512, 568, 569, 570, 571, 572, 573, 627, 628, 629, 630, 631, 632, 633, 634, 692, 693, 694, 695, 696, 697, 698, 699, 760, 761, 762, 763, 764, 765, 766, 767, 768, 827, 828, 829, 830, 831, 832, 833, 893, 894, 895, 896, 897, 898, 957, 958, 959] 
Cluster_7 =  [2146, 2186, 2187, 2188, 2189, 2224, 2225, 2226, 2227, 2228, 2229, 2259, 2260, 2261, 2262, 2263, 2264, 2265, 2266, 2290, 2291, 2292, 2293, 2294, 2295, 2296, 2297, 2317, 2318, 2319, 2320, 2321, 2322, 2323, 2339, 2340, 2341, 2342, 2343, 2344, 2353, 2354, 2355]
Cluster_8 = [202, 203, 204, 205, 206, 242, 243, 244, 245, 246, 247, 283, 284, 285, 286, 287, 324, 325, 326, 327, 328, 329, 371, 372, 373, 374, 421, 422, 423, 424, 425, 477, 478, 479, 480, 481, 539, 540, 541, 542, 601, 602] 
Cluster_9 = [1866, 1867, 1868, 1922, 1923, 1924, 1925, 1926, 1927, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2218, 2219, 2220, 2256, 2257] 
Cluster_10 = [45, 46, 61, 62, 63, 64, 82, 83, 84, 85, 86, 104, 105, 106, 107, 108, 109, 110, 130, 131, 132, 133, 134, 135, 136, 155, 156, 157, 158, 159, 160, 161, 181, 182, 183, 184, 185, 186, 187, 220, 221, 222, 223, 224, 225, 226, 262, 263, 264, 265]
Cluster_11 = [581, 641, 642, 643, 644, 707, 708, 709, 710, 711, 712, 775, 776, 777, 778, 779, 780, 781, 782, 840, 841, 842, 843, 844, 845, 846, 847, 904, 905, 906, 907, 908, 909, 969, 970, 971, 972, 973, 974] 
Cluster_12 = [1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1671, 1672, 1673, 1674, 1726, 1727, 1728, 1729] 
Cluster_13 = [1149, 1150, 1204, 1205, 1206, 1207, 1262, 1263, 1264, 1265, 1266, 1267, 1328, 1329, 1330, 1331, 1332, 1333, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1639, 1640, 1641, 1642, 1643, 1695] 
Cluster_14 = [1053, 1054, 1055, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1471, 1472, 1473, 1474, 1475, 1476, 1533] 
Cluster_15 = [614, 675, 676, 677, 678, 679, 680, 681, 744, 745, 746, 747, 748, 749, 750, 810, 811, 812, 813, 814, 815, 816, 875, 876, 877, 878, 879, 880, 881, 938, 939, 940, 941, 942, 943, 944, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1056, 1057, 1058, 1059, 1060, 1112]
Cluster_16 = [468, 469, 470, 471, 529, 530, 531, 532, 533, 534, 589, 590, 591, 592, 593, 594, 595, 651, 652, 653, 654, 655, 656, 657, 719, 720, 721, 722, 723, 788, 789, 790, 853, 854, 855, 915, 916, 917] 
Cluster_17 = [1905, 1961, 1962, 1963, 1964, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2198, 2199, 2200, 2201, 2202, 2236, 2237, 2238, 2239, 2240, 2274, 2275, 2303] 
Cluster_18 = [619, 620, 621, 682, 683, 684, 685, 686, 687, 688, 751, 752, 753, 754, 755, 756, 757, 758, 817, 818, 819, 820, 821, 822, 823, 824, 882, 883, 884, 885, 886, 887, 888, 945, 946, 947, 948, 949, 950, 1007, 1008, 1009, 1010, 1011, 1064, 1065] 
Cluster_19 = [6, 7, 8, 9, 10, 11, 12, 13, 21, 22, 23, 24, 25, 26, 27, 28, 36, 37, 38, 39, 40, 41, 42, 43, 44, 53, 54, 55, 56, 57, 58, 59, 60, 75, 76, 77, 78, 79, 80, 81, 100, 101, 102, 103, 129] 
Cluster_20 = [960, 961, 1019, 1020, 1021, 1022, 1023, 1024, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306] 
Cluster_21 = [0, 1, 2, 3, 4, 5, 14, 15, 16, 17, 18, 19, 20, 29, 30, 31, 32, 33, 34, 35, 47, 48, 49, 50, 51, 52, 68, 69, 70, 71, 72, 73, 74, 91, 92, 93, 94, 95, 96, 97, 117, 118, 119, 120, 121, 122, 142, 143, 144, 145, 146] 
Cluster_22 = [1295, 1296, 1297, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1665, 1666, 1667, 1668, 1669, 1670, 1720, 1721, 1722, 1723, 1724, 1725] 
Cluster_23 =  [65, 66, 67, 87, 88, 89, 90, 111, 112, 113, 114, 115, 116, 137, 138, 139, 140, 141, 162, 163, 164, 165, 166, 167, 188, 189, 190, 191, 192, 193, 194, 195, 227, 228, 229, 230, 231, 232, 233, 234, 269, 270, 271, 272, 273, 310, 311] 
Cluster_24 = [266, 267, 268, 304, 305, 306, 307, 308, 309, 346, 347, 348, 349, 350, 351, 352, 389, 390, 391, 392, 393, 394, 395, 440, 441, 442, 443, 444, 445, 446, 495, 496, 497, 498, 499, 500, 501, 555, 556, 557, 558, 559, 560, 561, 615, 616, 617, 618]
Cluster_25 =  [1574, 1575, 1576, 1577, 1578, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1906, 1907, 1908, 1909, 1910, 1911, 1965, 1966, 1967, 1968, 2022, 2023]
Cluster_26 = [1404, 1405, 1406, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1755, 1756, 1757, 1758, 1759, 1760, 1810, 1811, 1812, 1813, 1814, 1864, 1865] 
Cluster_27 = [1033, 1034, 1086, 1087, 1088, 1089, 1090, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1388, 1389, 1390, 1391, 1392, 1393, 1451, 1452, 1453, 1454, 1455, 1513, 1514, 1515, 1516] 
Cluster_28 = [544, 545, 546, 603, 604, 605, 606, 607, 670, 671, 672, 673, 674, 737, 738, 739, 740, 741, 742, 743, 803, 804, 805, 806, 807, 808, 809, 868, 869, 870, 871, 872, 873, 874, 931, 932, 933, 934, 935, 936, 937, 994, 995, 996, 997, 998, 999, 1050, 1051, 1052] 
Cluster_29 = [1193, 1194, 1249, 1250, 1251, 1252, 1253, 1254, 1315, 1316, 1317, 1318, 1319, 1320, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1625, 1626, 1627, 1628, 1629, 1630, 1631] 
Cluster_30 = [1422, 1480, 1481, 1482, 1539, 1540, 1541, 1542, 1543, 1544, 1599, 1600, 1601, 1602, 1603, 1604, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1823, 1824, 1825, 1826, 1827, 1828, 1876, 1877, 1878, 1879, 1880] 
Cluster_31 = [1781, 1782, 1783, 1784, 1836, 1837, 1838, 1839, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2056, 2057, 2058, 2059, 2060, 2061, 2107, 2108, 2109] 
Cluster_32 = [2352, 2363, 2364, 2365, 2372, 2373, 2374, 2375, 2381, 2382, 2383, 2384, 2385, 2389, 2390, 2391, 2392, 2393, 2394, 2400, 2401, 2402, 2403, 2404, 2405, 2406, 2411, 2412, 2413, 2414, 2415, 2416, 2417] 
Cluster_33 = [196, 197, 198, 199, 200, 201, 235, 236, 237, 238, 239, 240, 241, 276, 277, 278, 279, 280, 281, 282, 321, 322, 323, 366, 367, 368, 369, 370, 415, 416, 417, 418, 419, 420, 472, 473, 474, 475, 476, 535, 536, 537, 538, 596] 
Cluster_34 = [2345, 2346, 2347, 2356, 2357, 2358, 2359, 2360, 2361, 2362, 2366, 2367, 2368, 2369, 2370, 2371, 2376, 2377, 2378, 2379, 2380, 2386, 2387, 2388, 2395, 2396, 2397, 2398, 2399, 2407, 2408, 2409, 2410] 
Cluster_35 = [409, 410, 411, 412, 413, 414, 461, 462, 463, 464, 465, 466, 467, 522, 523, 524, 525, 526, 527, 528, 582, 583, 584, 585, 586, 587, 588, 645, 646, 647, 648, 649, 650, 713, 714, 715, 716, 717, 718, 783, 784, 785, 786, 787, 848, 849, 850, 851, 852, 910, 911, 912, 913, 914, 975, 976, 977, 978, 1031, 1032] 
Cluster_36 = [635, 700, 701, 702, 703, 769, 770, 771, 772, 773, 834, 835, 836, 837, 838, 839, 899, 900, 901, 902, 903, 962, 963, 964, 965, 966, 967, 968, 1025, 1026, 1027, 1028, 1029, 1030, 1081, 1082, 1083, 1084, 1085, 1135, 1136, 1137, 1138, 1139, 1191, 1192] 
Cluster_37 = [2104, 2105, 2106, 2149, 2150, 2151, 2152, 2153, 2154, 2155, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2230, 2231, 2232, 2233, 2234, 2235, 2267, 2268, 2269, 2270, 2271, 2272, 2273, 2298, 2299, 2300, 2301, 2302, 2324, 2325, 2326, 2327, 2328, 2329, 2348, 2349, 2350, 2351] 
Cluster_38 = [663, 664, 665, 666, 667, 668, 669, 730, 731, 732, 733, 734, 735, 736, 796, 797, 798, 799, 800, 801, 802, 861, 862, 863, 864, 865, 866, 867, 925, 926, 927, 928, 929, 930, 987, 988, 989, 990, 991, 1042, 1043] 
Cluster_39 = [597, 598, 599, 600, 658, 659, 660, 661, 662, 724, 725, 726, 727, 728, 729, 791, 792, 793, 794, 795, 856, 857, 858, 859, 860, 918, 919, 920, 921, 922, 923, 924, 979, 980, 981, 982, 983, 984, 985, 986, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1091, 1092, 1093, 1094, 1095, 1148] 
Cluster_40 = [317, 318, 319, 320, 360, 361, 362, 363, 364, 365, 404, 405, 406, 407, 408, 455, 456, 457, 458, 459, 460, 513, 514, 515, 516, 517, 518, 519, 520, 521, 574, 575, 576, 577, 578, 579, 580, 636, 637, 638, 639, 640, 704, 705, 706, 774]
Cluster_41 = [825, 826, 889, 890, 891, 892, 951, 952, 953, 954, 955, 956, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1291, 1292, 1293, 1294] 
Cluster_42 = [1534, 1535, 1536, 1537, 1594, 1595, 1596, 1597, 1598, 1653, 1654, 1655, 1656, 1657, 1707, 1708, 1709, 1710, 1711, 1712, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1928, 1929, 1930, 1931, 1987, 1988] 
Cluster_43 = [168, 169, 170, 171, 172, 207, 208, 209, 210, 211, 212, 248, 249, 250, 251, 252, 253, 254, 288, 289, 290, 291, 292, 293, 294, 330, 331, 332, 333, 334, 335, 336, 337, 375, 376, 377, 378, 379, 380, 426, 427, 428, 429, 430, 431, 482, 483, 484, 485, 543] 
Cluster_44 = [2032, 2033, 2080, 2081, 2082, 2083, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217, 2248, 2249, 2250, 2251, 2252, 2253, 2254, 2255, 2284, 2285, 2286, 2287, 2288, 2289, 2313, 2314, 2315, 2316, 2338] 
Cluster_45 = [1932, 1933, 1934, 1935, 1936, 1937, 1989, 1990, 1991, 1992, 1993, 1994, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2181, 2182, 2183, 2184, 2185, 2221, 2222, 2223, 2258]
Cluster_46 = [261, 299, 300, 301, 302, 303, 339, 340, 341, 342, 343, 344, 345, 381, 382, 383, 384, 385, 386, 387, 388, 432, 433, 434, 435, 436, 437, 438, 439, 486, 487, 488, 489, 490, 491, 492, 493, 494, 547, 548, 549, 550, 551, 552, 553, 554, 608, 609, 610, 611, 612, 613]
Cluster_47 =  [1247, 1248, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1438, 1439, 1440, 1441, 1442, 1443, 1499, 1500, 1501, 1502, 1503, 1504, 1560, 1561, 1562, 1563, 1564, 1565, 1620, 1621, 1622, 1623, 1624, 1675, 1676, 1677, 1678, 1679, 1730, 1731, 1732, 1785] '''
Cluster_48 = [1696, 1697, 1698, 1699, 1749, 1750, 1751, 1752, 1753, 1754, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2076, 2077, 2078, 2079]
Cluster_49 = [274, 275, 312, 313, 314, 315, 316, 353, 354, 355, 356, 357, 358, 359, 396, 397, 398, 399, 400, 401, 402, 403, 447, 448, 449, 450, 451, 452, 453, 454, 502, 503, 504, 505, 506, 507, 508, 562, 563, 564, 565, 566, 567, 622, 623, 624, 625, 626, 689, 690, 691, 759]


cluster_indices = [Cluster_48,Cluster_49]
#[Cluster_0,Cluster_1,Cluster_2,Cluster_3,Cluster_4,Cluster_5,Cluster_6,Cluster_7,Cluster_8,Cluster_9,Cluster_10,Cluster_11,Cluster_12,Cluster_13,Cluster_14,Cluster_15,Cluster_16,Cluster_17,Cluster_18,Cluster_19,Cluster_20,Cluster_21,Cluster_22,Cluster_23,Cluster_24,Cluster_25,Cluster_26,Cluster_27,Cluster_28,Cluster_29,Cluster_30,Cluster_31,Cluster_32,Cluster_33,Cluster_34,Cluster_35,Cluster_36,Cluster_37,Cluster_38,Cluster_39,Cluster_40,Cluster_41,Cluster_42,Cluster_43,Cluster_44,Cluster_45,Cluster_46,Cluster_47,Cluster_48,Cluster_49]
a = 0.001
b = 1
c = 1
Cap_Depot = 3000
Cap_Refinary = 8000


def optimus_prime(Cluster_indices, forecast):
    farm = Cluster_indices
    farm_depot = Cluster_indices
    depot_refinary = Cluster_indices
    refinary = Cluster_indices
    
    farm_depot_keys = [(f,d) for f in farm for d in farm_depot]
    depot_refinary_keys = [(d,r) for d in depot_refinary for r in refinary ]
    dist_dict = {(f,d): distance.loc[f,str(d)] for f in farm for d in farm_depot}
    # Define the Gurobi model
    model = gp.Model('optimize')
    # Define the variables
    open_depot = { d : model.addVar(vtype=gp.GRB.BINARY, name=f'open_depot_{d}')  for d in farm_depot}
    open_refinary = { d : model.addVar(vtype=gp.GRB.BINARY, name=f'open_refinary_{d}') for d in depot_refinary}
    biomass_flows = {(f, d): model.addVar(lb=0, vtype=gp.GRB.CONTINUOUS, name=f'biomass_flows_{f}_{d}') for (f, d) in farm_depot_keys}
    pellet_flows = {(d, r): model.addVar(lb=0, vtype=gp.GRB.CONTINUOUS, name=f'pellet_flows_{d}_{r}') for (d, r) in depot_refinary_keys}
    # Set the objective function
    Transport_cost_biomass = gp.quicksum(a * dist_dict.get((f, d)) * biomass_flows.get((f, d)) for f in farm for d in farm_depot )
    Transport_cost_pellet = gp.quicksum(a * dist_dict.get((d,r)) * pellet_flows.get((d, r)) for d in depot_refinary for r in refinary)
    Underutilization_cost_biomass = gp.quicksum(open_depot.get(d) * Cap_Depot for d in farm_depot) - gp.quicksum(biomass_flows.get((f, d)) for f in farm for d in farm_depot) 
    Underutilization_cost_pellet = gp.quicksum(open_refinary.get(d) * Cap_Refinary for d in depot_refinary) - gp.quicksum(pellet_flows.get((d, r)) for d in depot_refinary for r in refinary)
    cost_forecast = sum(forecast['mae'])
    model.setObjective(Transport_cost_biomass + Transport_cost_pellet + cost_forecast +Underutilization_cost_biomass+Underutilization_cost_pellet , gp.GRB.MINIMIZE)
    # Add constraints
    for f in farm:
        for d in farm_depot:
            model.addConstr(biomass_flows.get((f,d)) >= 0 ,name =f'bio_flow_{f}_{d}')
    for d in depot_refinary:
        for r in refinary:
            model.addConstr(pellet_flows.get((d,r)) >= 0 , name = f'pel_flow_{d}_{r}')
    for d in farm_depot:
        model.addConstr(gp.quicksum(biomass_flows.get((f, d)) for f in farm) <=  Cap_Depot, name=f'depot_{d}_limit')
    for r in refinary:
        model.addConstr(gp.quicksum( pellet_flows.get((d, r)) for d in depot_refinary) <=  Cap_Refinary, name=f'refinery_{r}_limit')
    model.addConstr(gp.quicksum(open_depot.get(d) for d in farm_depot) >= 2, name='depot_limit_lower')
    model.addConstr(gp.quicksum(open_refinary.get(d) for d in depot_refinary) >= 1, name='refinery_limit_lower')
    model.addConstr(gp.quicksum(open_depot.get(d) for d in farm_depot) <= 6, name='depot_limit_upper')
    model.addConstr(gp.quicksum(open_refinary.get(d) for d in depot_refinary) <= 3, name='refinery_limit_upper')
    for f in farm:
        model.addConstr(gp.quicksum(open_depot.get(d) * biomass_flows.get((f, d)) for d in farm_depot) >= 0.8 * forecast['forecast'].loc[f], name=f'farm_{f}_lower_limit')
    for f in farm:
        model.addConstr(gp.quicksum(biomass_flows.get((f, d)) for d in farm_depot) <= forecast['forecast'].loc[f], name=f'farm_{f}_upper_limit')
    for f in farm:
        for d in farm_depot:
            model.addConstr(biomass_flows.get((f, d)) <= open_depot.get(d) * forecast['forecast'].loc[f], name=f'link_{f}_{d}_bio')
    for d in farm_depot:
        model.addConstr(gp.quicksum(biomass_flows[i, d] for i in farm) == gp.quicksum(open_refinary.get(r)*pellet_flows[d,r] for r in refinary), name=f'balance_depot_{d}')        
    
    model.addConstr(gp.quicksum( biomass_flows.get((f, d)) for f in farm for d in farm_depot) == gp.quicksum( pellet_flows.get((d, r))for d in depot_refinary for r in refinary), name=f'balance_{d}')
    for d in farm_depot:
        model.addConstr(open_depot.get(d) + open_refinary.get(d) <= 1, name=f'one_depot_{d}')
    
    model.setParam("MIPGap", 0.08)
    model.setParam("MIPFocus", 2)
    model.setParam("Threads", 8)
    model.setParam("TimeLimit",500)
    # Optimize the model
    model.optimize()
    
    open_depot_values = {var.varName: var.x for var in open_depot.values()}
    open_refinary_values = {var.varName: var.x for var in open_refinary.values()}
    loc_depot = []
    for var_name, var_value in open_depot_values.items():
        if var_value > 0.9 :
            loc_depot.append(var_name)
    loc_refinary =[]
    for var_name, var_value in open_refinary_values.items():
        if var_value > 0.9:
            loc_refinary.append(var_name)
    loc_dep = pd.DataFrame(data = {'location':loc_depot})
    loc_dep['type'] = 'Depot'
    loc_ref = pd.DataFrame(data ={'location':loc_refinary})
    loc_ref['type'] ='Refinary'
    loc = pd.concat([loc_dep,loc_ref])        
    return loc

location = pd.DataFrame()
for c in cluster_indices:
    optimus = optimus_prime(Cluster_indices = c, forecast = forecast_2018)
    location = pd.concat([location,optimus])
    
location_depot = location[location['type'] == 'Depot']
location_refinary =   location[location['type'] == 'Refinary']  
location_depot = location_depot.reset_index(drop=True) 
location_refinary = location_refinary.reset_index(drop=True)    

    
    
    
    
    
    
    
    
    
    
    
    
    
    